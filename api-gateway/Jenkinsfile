pipeline {
    agent any

    environment {
        REGISTRY = 'your-openshift-registry-url' // Use single quotes to avoid variable interpolation
        APP_NAME = 'api-gateway'
        PROJECT_NAME = 'rupesh-kallepelli-dev'
        IMAGE_TAG = 'latest'
        OPENSHIFT_SERVER = 'https://api.sandbox-m4.g2pi.p1.openshiftapps.com:6443'
        TOKEN = 'sha256~qQERLPLF3gtYXph-UGTcXU7QbwRPutXtIJzr5xl4tck'
    }

    stages {
        stage('Trigger OpenShift Build') {
            steps {
                dir('api-gateway') {
                    try {
                        // Corrected syntax for `sh` steps using commas to separate `label` and `script`
                        sh(label: "Login into oc", script: "oc login --token=${TOKEN} --server=${OPENSHIFT_SERVER}")
                        sh(label: "Create buildconfig", script: "oc create -f ./helm/buildconfig.yaml")
                    } catch (err) {
                        sh(label: "Replace buildconfig oc", script: "oc replace -f ./helm/buildconfig.yaml")
                    } finally {
                        sh(label: "Start src build", script: "oc start-build ${APP_NAME} --from-dir=helm/ --follow")
                    }
                }
            }
        }

        stage('Deploy to OpenShift') {
            steps {
                dir('api-gateway') {
                    sh 'pwd'
                    sh 'ls'
                    sh """
                    oc apply -f ./helm/templates/deployment.yaml
                    oc project ${PROJECT_NAME}
                    oc new-app ${REGISTRY}/${PROJECT_NAME}/${APP_NAME}:${IMAGE_TAG} --name=${APP_NAME} || oc rollout latest ${APP_NAME}
                    oc expose svc/${APP_NAME}
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
